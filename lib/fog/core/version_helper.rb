module Fog
  class VersionHelper

    attr_reader :version_dir, :major, :minor, :patch, :build
    attr_reader :archived_major, :archived_minor, :archived_patch, :archived_build

      def write_version
        File.open(path, 'w') do |f|
          f.write self.to_ruby
        end
      end

      def reset_attributes
        reset_constants unless ::Fog::Version.const_defined?(:BUILD)
        @major = ::Fog::Version::MAJOR
        @minor = ::Fog::Version::MINOR
        @patch = ::Fog::Version::PATCH
        @build = ::Fog::Version::BUILD
      end

      def unset_constants
        [:MAJOR,:MINOR,:PATCH,:BUILD,:STRING].each do |const_sym|
          ::Fog::Version.__send__(:remove_const,const_sym) if ::Fog::Version.const_defined?(const_sym)
        end
        ::Fog.__send__(:remove_const,:VERSION) if ::Fog.const_defined?(:VERSION)
      end

      def reset_constants
        begin
          unset_constants
          load version_path # load sidesteps FakeFS which voids some features/specs
          Fog.module_eval("include ::Fog::Version", __FILE__, __LINE__)
        rescue => detail
          puts "Error in reset_constants"
          puts detail.message
          puts detail.backtrace.join('\n')
          raise
        ensure
        end
      end

      def path
        version_path
      end

      def to_hash
        {
          :major => major,
          :minor => minor,
          :patch => patch,
          :build => build
        }
      end

      def to_ruby
"
# PLEASE DO NOT EDIT THIS FILE DIRECTLY.
# This is generated by Fog's release tasks in #{Rake.application.rakefile_location}.
# That is, Fog's version numbers change on release.
# To make a non-sequential number change, please run the rake command
#    rake release:custom[3,7,1,2]
module ::Fog
  module Version
    MAJOR = #{@major}
    MINOR = #{@minor}
    PATCH = #{@patch}
    BUILD = #{@build}
    STRING = \"\#{MAJOR}.\#{MINOR}.\#{PATCH}.\#{BUILD}\"
  end
end
"
      end

    def initialize(base_dir)
      @version_dir = base_dir.to_s

      if File.exists?(version_path)
        reset_attributes
      end
    end

    def archive_version
      @archived_major, @archived_minor, @archived_patch, @archived_build = @major, @minor, @patch, @build
    end

    def increment(type, hsh=nil)
      case type
        when :major
          @major += 1
          @minor, @patch, @build = 0, 0, 0
        when :minor
          @minor += 1
          @build, @patch = 0, 0
        when :patch
          @patch += 1
          @build = 0
        when :build
          @build += 1
        when :custom
          hsh[:major] ? @major = hsh[:major] : false
          hsh[:minor] ? @minor = hsh[:minor] : false
          hsh[:patch] ? @patch = hsh[:patch] : false
          hsh[:build] ? @build = hsh[:build] : false
      end
    end

    def preview_version(type)
      case type
        when :major
          "#{@major+1}.0.0.0"
        when :minor
          "#{@major}.#{@minor+1}.0.0"
        when :patch
          "#{@major}.#{@minor}.#{@patch+1}.0"
        when :build
          "#{@major}.#{@minor}.#{@patch}.#{@build+1}"
      end


    end

    def bump(type, hsh=nil)
      archive_version
      if hsh
        increment(type, hsh)
      else
        increment(type)
      end
      write_version
      reset_constants
      reset_attributes
    end

    def bump_major
      bump(:major)
    end

    def bump_minor
      bump(:minor)
    end

    def bump_patch
      bump(:patch)
    end

    def bump_build
      bump(:build)
    end

    def bump_custom(hsh)
      bump(:custom, hsh)
    end

    def update_to(major, minor=0, patch=0, build=0)
      @major = major
      @minor = minor
      @patch = patch
      @build = build
    end

    def to_s
      [major, minor, patch, build].compact.join('.')
    end

    def version_path
      File.join(@version_dir, 'version.rb')
    end

    def unset_version
      unset_constants
      unset_attributes
    end

    def unset_attributes
      @major, @minor, @patch, @build = nil, nil, nil, nil
    end

    def reset_version
      unset_version
      reset_constants
      reset_attributes
    end

    private


  end

end
